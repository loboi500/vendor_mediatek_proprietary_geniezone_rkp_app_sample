#
# Copyright (c) 2020 MediaTek Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

CROSS_TOOL := $(ALPS_DIR)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9.1/bin/aarch64-linux-android-
CROSS_LIB := $(ALPS_DIR)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9.1/lib/gcc/aarch64-linux-android/4.9.x
TOOLCHAIN_PREFIX=$(CROSS_TOOL)

TARGET_32 ?= 0
CFLAGS =
LDFLAGS =
TARGET_NAME ?= rkp_test
TARGET ?= $(TARGET_NAME).elf

CFLAGS += -O2
CFLAGS += -fpie -pie
CFLAGS += -g -fno-builtin -finline
CFLAGS += -W -Wall -Wno-multichar -Wno-unused-parameter
CFLAGS += -Wno-unused-function -Wno-unused-label
CFLAGS += -gdwarf-2 -ffunction-sections -fdata-sections
CFLAGS += --std=gnu99
CFLAGS += -Werror-implicit-function-declaration -Wstrict-prototypes
CFLAGS += -Wwrite-strings -Wno-type-limits

LDFLAGS += -PIE
LDFLAGS += --gc-sections --print-gc-sections
LDSCRIPT = link_descriptor.ld
LDLIB = $(CROSS_LIB)/libgcc.a
LDMAP = $(TARGET_NAME).map
DISFILE = $(TARGET_NAME).dis
DSSFILE = $(TARGET_NAME).dss
ELFDUMP = $(TARGET_NAME).txt
BINFILE = $(TARGET_NAME).bin

CC := $(TOOLCHAIN_PREFIX)gcc
LD := $(TOOLCHAIN_PREFIX)ld
READELF := $(TOOLCHAIN_PREFIX)readelf
DSS := $(TOOLCHAIN_PREFIX)objdump
OBJCOPY := $(TOOLCHAIN_PREFIX)objcopy

.PHONY: default all clean clang-fmt
.SILENT: default all clean clang-fmt

default: $(OUT_DIR) $(TARGET)
all: default

SRCS =
SRCS += entry.c

OBJECTS = $(patsubst %.c, $(OUT_DIR)/%.o, $(wildcard $(SRCS)))
##HEADERS = $(wildcard *.h)

CFLAGS += -I$(PWD)/../../../inc/gz_api 
CFLAGS += -I$(PWD)/../../../inc/common

$(info QQQQQQQQQQQQQQ $(HEADERS))

$(OUT_DIR)/%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

.PRECIOUS: $(OUT_DIR) $(TARGET) $(OBJECTS)

$(OUT_DIR):
	@mkdir -p $(OUT_DIR)

$(TARGET): $(OBJECTS)
	@echo generating elf: $@
	$(LD) $(LDFLAGS) -T $(LDSCRIPT) -Map $(LDMAP) --start-group $(OBJECTS) --end-group $(LDLIB) -o $@
	$(OBJCOPY) -O binary $@ $(BINFILE)
	$(READELF) -at $@ > $(ELFDUMP)
	$(DSS) -D $@ > $(DISFILE)
	$(DSS) -D -S $@ > $(DSSFILE)
	@file $(TARGET)

clean:
	rm -f *.o
	rm -rf out
	rm -f $(TARGET) $(BINFILE)
	rm -f $(LDMAP) $(DISFILE) $(DSSFILE) $(ELFDUMP)

clang-fmt:
	git clang-format-3.9 $(SRCS)
	git clang-format-3.9 $(HEADERS)
